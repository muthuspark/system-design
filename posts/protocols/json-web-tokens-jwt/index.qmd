---
title: "JSON Web Tokens (JWT)"
categories: [ "Protocols" ]
---

JSON Web Tokens (JWTs) have become a ubiquitous standard for securely transmitting information between parties as a JSON object. They're used extensively in modern web applications for authentication and authorization, offering a streamlined and efficient approach compared to traditional session management. But what exactly *are* JWTs, and how do they work their magic? Let's unravel the mystery.

## Understanding the Structure of a JWT

A JWT is essentially a compact, URL-safe string consisting of three parts, separated by periods (`.`):

1.  **Header:** Contains metadata about the token, such as the algorithm used to sign it.
2.  **Payload:** Carries the actual claims (data) being transmitted. This could include user information, permissions, or anything else relevant to the application.
3.  **Signature:** Ensures the integrity and authenticity of the token. It's generated using a secret key known only to the issuer and verifier.

Here's a visual representation using a Mermaid diagram:

```{mermaid}
graph LR
    A[Header] --> B(Base64URL Encoding);
    B --> C{Payload};
    C --> D(Base64URL Encoding);
    D --> E[Signature];
    E --> F(HMAC or RSA);
    F --> G((JWT String));
```

Let's break down each part in more detail:

**1. Header:** This typically contains the token type (`JWT`) and the signing algorithm used. For instance:

``` json
{
  "alg": "HS256",
  "typ": "JWT"
}
```

Here, `alg` specifies the Hashing Algorithm (HS256 using HMAC-SHA256), and `typ` indicates the token type.

**2. Payload:** The payload contains the claims. These claims are key-value pairs, often including:

-   `iss` (Issuer): Who issued the token.
-   `sub` (Subject): The subject the token refers to (e.g., a user ID).
-   `aud` (Audience): Who the token is intended for.
-   `exp` (Expiration Time): When the token expires.
-   `nbf` (Not Before): When the token becomes valid.
-   `iat` (Issued At): When the token was issued.
-   `jti` (JWT ID): A unique identifier for the token.
-   Custom Claims: Application-specific data.

Example Payload:

``` json
{
  "iss": "example.com",
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
```

**3. Signature:** This part is important for security. It's generated by signing the header and payload using a secret key and the algorithm specified in the header. This prevents tampering and ensures that the token hasn't been altered.

## Creating and Verifying JWTs

The process of creating and verifying JWTs involves encoding and decoding the header and payload using Base64URL encoding, then signing and verifying the signature using the chosen algorithm. This process often leverages libraries to simplify the tasks.

Let's illustrate with a Python example using the `PyJWT` library:

**Creating a JWT:**

``` python
import jwt

payload = {
    'iss': 'example.com',
    'sub': '1234567890',
    'name': 'John Doe',
    'exp': 1678886400  # Example expiration timestamp
}

secret_key = 'your-secret-key' #Keep this secret!

encoded_jwt = jwt.encode(payload, secret_key, algorithm='HS256')
print(encoded_jwt)
```

**Verifying a JWT:**

``` python
import jwt

encoded_jwt = 'your-encoded-jwt-string' # from above
secret_key = 'your-secret-key'

try:
    decoded_payload = jwt.decode(encoded_jwt, secret_key, algorithms=['HS256'])
    print(decoded_payload)
except jwt.ExpiredSignatureError:
    print("Token has expired")
except jwt.InvalidTokenError:
    print("Invalid token")
```

Remember to replace `"your-secret-key"` and `"your-encoded-jwt-string"` with your actual values. Always store your secret keys securely.

## JWT Use Cases

JWTs are exceptionally versatile and find applications in various scenarios:

-   **Authentication:** Verifying user identity after login.
-   **Authorization:** Granting access to specific resources based on user roles and permissions.
-   **Information Exchange:** Securely passing user data between microservices.
-   **Single Sign-On (SSO):** Allowing users to access multiple applications with a single login.
-   **API Authentication:** Securing access to APIs.

## Security Considerations

While JWTs offer significant advantages, it's important to address security concerns:

-   **Secret Key Management:** Securely store and manage your secret keys.
-   **Token Expiration:** Set appropriate expiration times to limit the validity of tokens.
-   **HTTPS:** Always use HTTPS to transmit JWTs to prevent interception.
-   **Token Revocation:** Implement mechanisms to revoke tokens if compromised.
-   **Algorithm Selection:** Choose strong and appropriate signing algorithms.

## Summary