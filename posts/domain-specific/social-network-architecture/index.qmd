---
title: "Social Network Architecture"
categories: [ "Domain-Specific" ]
---

Social networks have fundamentally changed how billions of people connect, share, and interact online. Building a scalable social platform requires careful consideration of complex technical challenges like handling massive user data, enabling real-time interactions, managing content delivery, and ensuring high availability across global regions.

This article will look at the key architectural components and design decisions needed to build a social network that can support millions of users. We'll examine core features like news feeds, friend relationships, content storage, and notification systems, along with scalability, performance, and reliability considerations that shape modern social platforms.

## The Core Components

A typical social network architecture can be broken down into many key components:

#### **1. Frontend:**

-   **User Interface (UI):** Web and mobile applications that allow users to interact with the platform.
    -   **Web App:** Developed using modern web frameworks like React, Angular, or Vue.
    -   **Mobile App:** Native (iOS and Android) or cross-platform (e.g., Flutter, React Native).
-   **API Calls:** Communicate with the backend via RESTful or GraphQL APIs.

#### **2. Backend:**

-   **Web Servers (Application Layer):**
    -   **Microservices Architecture:** Split functionalities into multiple services to allow for scalability and fault tolerance.
    -   **Languages & Frameworks:** Node.js, Java, Python, Ruby on Rails, etc.
    -   **API Gateway:** For routing, load balancing, and API management (e.g., Kong, NGINX, AWS API Gateway).
-   **Core Services:**
    -   **User Service:** Manages user profiles, authentication, and authorization.
    -   **Feed Service:** Generates and serves posts on the user's feed.
    -   **Friendship Service:** Manages friend requests, relationships, and social graph.
    -   **Post/Content Service:** Manages the creation, editing, deletion, and retrieval of posts.
    -   **Messaging Service:** Handles private messages between users, including real-time communication (using WebSockets, for instance).
    -   **Notification Service:** Sends notifications about new posts, messages, friend requests, etc.
    -   **Search Service:** Provides search capabilities to find users, posts, groups, etc. (Could use Elasticsearch or similar tools).
    -   **Media Service:** Handles media uploads and serves images, videos, etc. (e.g., using a CDN for media delivery).
-   **Database Layer:**
    -   **Relational Databases (SQL):** For user profiles, relationships, posts (e.g., MySQL, PostgreSQL).
    -   **NoSQL Databases:** For feeds and messages, where quick read/write performance is required (e.g., MongoDB, Cassandra).
    -   **Search Database:** For full-text search (e.g., Elasticsearch).
    -   **Cache Layer:** Use Redis or Memcached for caching frequently accessed data (e.g., user feeds, notifications).
    -   **Data Warehouse:** Store logs, analytics data, and large-scale user activity data (e.g., BigQuery, Snowflake).
-   **Message Queues:**
    -   **RabbitMQ, Kafka, or SQS** to manage asynchronous processing (e.g., processing posts, notifications, and messaging queues).

#### **3. Infrastructure:**

-   **Load Balancers:** Distribute incoming traffic across multiple servers to balance load (e.g., HAProxy, AWS ELB).
-   **Kubernetes:** Container orchestration for managing microservices and ensuring scalability and fault tolerance.
-   **Docker:** Containerization of microservices for easier deployment and scaling.

#### **4. Third-party Integrations:**

-   **Authentication Services:** Use OAuth or SSO for third-party logins (Google, Facebook, etc.).
-   **Payment Gateways:** If there’s a monetization model (e.g., Stripe, PayPal).
-   **Analytics:** Tools like Google Analytics or custom analytics service to track user behavior and engagement.

#### **5. Security:**

-   **Authentication & Authorization:**
    -   OAuth2 for third-party login (Google, Facebook).
    -   JWT (JSON Web Tokens) for session management.
    -   Multi-factor Authentication (MFA) for additional security.
-   **Data Encryption:** Encrypt sensitive data at rest and in transit using TLS/SSL.
-   **Access Control:** Role-based access control (RBAC) for restricting access to certain features (admin, regular user, etc.).

## Architectural Diagram

This diagram provides an overview of the major components and their interactions in a social network system architecture.

```{mermaid}
graph LR
    subgraph Frontend
        A["User Interface (Web & Mobile App)"]
    end

    subgraph API_Gateway
        B[API Gateway]
    end

    subgraph Backend
        C[User Service]
        D[Feed Service]
        E[Post Service]
        F[Friendship Service]
        G[Messaging Service]
        H[Notification Service]
        I[Search Service]
        J[Media Service]
    end

    subgraph Infrastructure
        Q[Load Balancer]
        R[Kubernetes]
        S[Docker]
    end

    subgraph Databases
        K["Relational DB (SQL)"]
        L["NoSQL DB (MongoDB)"]
        M["Search DB (Elasticsearch)"]
        N["Cache (Redis)"]
        O["Data Warehouse (BigQuery)"]
        P["Media Storage (CDN/S3)"]
    end


    subgraph Third_Party_Integrations
        T["OAuth (Google/Facebook)"]
        U["Payment Gateway (Stripe)"]
        V["Analytics (Google Analytics)"]
    end

    A --> B
    B --> C
    B --> D
    B --> E
    B --> F
    B --> G
    B --> H
    B --> I
    B --> J
    C --> K
    D --> L
    E --> L
    F --> L
    G --> L
    H --> K
    I --> M
    J --> P
    J --> N
    P --> Q
    Q --> R
    R --> S
    C --> T
    E --> U
    H --> V
    D --> N
    F --> K
    G --> O
    A -.-> Q
    C -.-> Q
    D -.-> Q
    E -.-> Q
    F -.-> Q
    G -.-> Q
    H -.-> Q
    I -.-> Q
    J -.-> Q
```

-   **Frontend**: The user interacts with the Web & Mobile apps, which communicate through the API Gateway to the backend services.
-   **Backend**: Core services handle various responsibilities such as user profiles, feeds, posts, messaging, notifications, and search.
-   **Databases**: Different types of databases store various kinds of data—relational for user info, NoSQL for high performance reads/writes, search for full-text search, and cache for frequently accessed data.
-   **Infrastructure**: Load balancing, container orchestration (Kubernetes), and Docker are used for scalability, deployment, and fault tolerance.
-   **Third-party Integrations**: Authentication, payment gateways, and analytics for extending the platform’s functionality.
-   **Media Upload and Storage:** Media Service is responsible for handling media uploads. Uploaded media (e.g., images, videos) is stored in Media Storage (CDN/S3). Redis (Cache) is used to cache frequently accessed media.

## Data Flow

The data flow architectures shows information moves between different system components. This section examines the critical paths data takes from user interactions to storage, processing, and delivery - including post creation, content distribution, and real-time updates. Understanding these flows is essential for building a responsive and reliable social platform that can handle millions of concurrent users while maintaining data consistency and low latency.

### 1. User Signup/Authentication

The user registers via the frontend (mobile/web), which makes an API call to the user service to store user details. The user’s session is created using JWT.

```{mermaid}
sequenceDiagram
    participant User as User (Frontend)
    participant UI as User Interface
    participant API as API Gateway
    participant Auth as Authentication Service
    participant DB as User Database

    User->>UI: Fills Signup/Login Form
    UI->>API: Sends Form Data (Username, Password, etc.)
    API->>Auth: Forward Form Data for Authentication
    Auth->>DB: Check/Store User Credentials
    DB-->>Auth: Returns User Exists/Success or Create New User
    Auth-->>API: Returns Success/Failure with Token (JWT)
    API-->>UI: Send Authentication Token
    UI-->>User: Display Success or Error Message
    User->>UI: Uses Token for Subsequent Requests
    UI->>API: Send Token with API Requests
    API->>Auth: Validates Token for Authentication
    Auth-->>API: Returns Valid/Invalid
    API-->>UI: Grants Access if Valid
```

-   **User fills the signup or login form** on the frontend (web or mobile app).
-   **The form data is sent to the API Gateway**, which routes the request to the Authentication Service.
-   **Authentication Service checks or stores the credentials** in the user database, verifying if the user exists or creating a new one if signing up.
-   **The Authentication Service responds** with a success or failure message and issues a JWT (JSON Web Token) if successful.
-   **The token is sent back to the frontend**, and subsequent requests use this token for authorization.
-   **The token is validated** by the authentication service on every request to verify the user's identity before granting access to protected resources.

### 2. Posting Content

The user uploads a post with text or media. The frontend sends the request to the post service, which stores the post in the database. The feed service updates the user's feed and relevant friends’ feeds.

The below diagram captures the complete flow of data and services involved when a user posts content, including media uploads and feed updates.

```{mermaid}
sequenceDiagram
    participant User as User (Frontend)
    participant UI as User Interface
    participant API as API Gateway
    participant PostService as Post Service
    participant MediaService as Media Service
    participant FeedService as Feed Service
    participant PostDB as Post Database
    participant MediaCDN as Media Storage (CDN)
    participant FeedDB as Feed Database

    User->>UI: Create Post with Text/Media
    UI->>API: Send Post Request (Text/Media)
    API->>PostService: Forward Post Data
    PostService->>PostDB: Store Post Metadata (Text, Timestamp)
    PostService->>MediaService: Send Media Data for Upload
    MediaService->>MediaCDN: Upload Media to CDN
    MediaCDN-->>MediaService: Return Media URL
    MediaService-->>PostService: Return Media URL
    PostService-->>API: Post Created (Post ID, Media URL)
    API-->>UI: Return Success (Post ID, Media URL)
    PostService->>FeedService: Notify Feed Service (New Post)
    FeedService->>FeedDB: Update User's Feed
    FeedService->>FeedDB: Update Friends' Feeds
    FeedDB-->>FeedService: Feeds Updated
    FeedService-->>UI: Feed Updated for User and Friends
```

-   **User creates a post** with text and/or media on the frontend (Web/Mobile App).
-   **The frontend sends the post data** to the API Gateway, which routes it to the Post Service.
-   **Post Service stores the post metadata** (text, timestamps, and post details) in the Post Database.
-   **If the post includes media**, the Post Service sends the media to the Media Service, which uploads the media to a CDN (Content Delivery Network) and returns the media URL.
-   **The Post Service responds back to the frontend** with a success message and the Post ID and Media URL.
-   **The Post Service notifies the Feed Service** about the new post.
-   **The Feed Service updates the feeds** of the user and their friends by interacting with the Feed Database.
-   **The updated feeds are sent back to the user**, showing the post in the feed and ensuring friends’ feeds are updated as well.

### 3. Real-time Messaging

The user sends a message via WebSocket, which the messaging service handles in real time.

The below sequence demonstrates how real-time messaging works, leveraging WebSocket connections for instant, two-way communication between users. The message queue is optional and can be used to handle high traffic and ensure reliable delivery.

```{mermaid}
sequenceDiagram
    participant User as User (Frontend)
    participant WebSocket as WebSocket Connection
    participant MessagingService as Messaging Service
    participant MessageQueue as Message Queue (Optional)
    participant Receiver as Receiver (Frontend)
    participant DB as Message Database

    User->>WebSocket: Send Message (Text/Media)
    WebSocket->>MessagingService: Forward Message via WebSocket
    MessagingService->>DB: Store Message in Database
    alt With Message Queue
        MessagingService->>MessageQueue: Add Message to Queue
        MessageQueue->>Receiver: Deliver Message via WebSocket
    else Without Message Queue
        MessagingService->>Receiver: Deliver Message via WebSocket
    end
    DB-->>MessagingService: Acknowledge Message Stored
    MessagingService-->>User: Acknowledge Message Sent
    Receiver-->>User: Message Delivered Notification
```

-   **User sends a message** (text or media) via the frontend app (Web or Mobile). This communication happens through a WebSocket connection.
-   **The WebSocket connection forwards the message** to the Messaging Service in real time. WebSockets provide a persistent connection, allowing messages to be sent instantly.
-   **The Messaging Service stores the message** in the Message Database. This ensures the message is persisted for history or future retrieval.
-   Depending on the architecture:
    -   **With Message Queue**: The message is added to a message queue (e.g., RabbitMQ, Kafka) to ensure reliable delivery and asynchronous processing. The message is then delivered to the intended recipient via their WebSocket connection.
    -   **Without Message Queue**: The Messaging Service directly delivers the message to the recipient through their active WebSocket connection.
-   **The Message Database acknowledges** that the message has been successfully stored.
-   **The Messaging Service sends an acknowledgment** back to the user (sender), indicating the message was successfully sent.
-   **The recipient receives the message** via their WebSocket connection and gets a notification or the message directly in their chat interface in real time.
-   **The recipient's frontend sends a delivery notification** back to the sender, confirming that the message was delivered successfully.

### Notification

When a user receives a message or interaction on their post, the notification service pushes a notification to the frontend.

The below sequence demonstrates how notifications work in real time for interactions on posts or messages. The notification service is responsible for handling all interactions and delivering notifications to users efficiently.

```{mermaid}
sequenceDiagram
    participant UserA as User A (Sender)
    participant UI as User A's Frontend (Web/Mobile)
    participant PostService as Post/Message Service
    participant NotificationService as Notification Service
    participant DB as Notification Database
    participant UserB as User B (Receiver)
    participant ReceiverUI as User B's Frontend (Web/Mobile)

    UserA->>UI: Send Message / Interact with Post
    UI->>PostService: Send Interaction (Message/Post Comment/Like)
    PostService->>NotificationService: Notify about Interaction
    NotificationService->>DB: Store Notification in Notification DB
    NotificationService-->>PostService: Notification Stored
    NotificationService->>ReceiverUI: Push Notification to User B
    ReceiverUI-->>UserB: Display Notification in Real Time
```

-   **User A initiates an interaction**: User A sends a message, likes a post, or comments on a post through the frontend (Web/Mobile app).
-   **The frontend sends the interaction data** to the corresponding service (Post Service for post interactions, Message Service for direct messages).
-   **The Post/Message Service triggers the Notification Service**, informing it about the interaction that occurred (e.g., a comment on a post, a like, or a message sent).
-   **The Notification Service stores the notification** in the Notification Database for tracking purposes, so the notification can be retrieved or displayed later if necessary.
-   **The Notification Service confirms the storage** of the notification with the Post/Message Service to complete the interaction flow.
-   **The Notification Service pushes the notification** to the recipient (User B) through the frontend (WebSocket or Push Notifications).
-   **User B’s frontend displays the notification** in real time, alerting them about the interaction (message, post like, comment, etc.). l \## More Data Flows

Here are additional **key data flows** within the system:

### 1. **User Profile Management**

```{mermaid}
sequenceDiagram
    participant User as User (Frontend)
    participant APIGateway as API Gateway
    participant UserService as User Service
    participant SQLDB as SQL Database (Profile Info)
    participant CDN as CDN (Media Storage)
    participant FeedService as Feed Service
    participant FriendProfile as Friend's Profile

    User->>User: Submit Profile Changes (e.g., Name, Picture)
    User->>APIGateway: Send Profile Change Request
    APIGateway->>UserService: Forward Request to User Service
    UserService->>SQLDB: Update Profile Info in SQL DB
    alt Media Upload (Profile Picture)
        UserService->>CDN: Upload New Profile Picture to CDN
    end
    SQLDB-->>UserService: Confirm Profile Info Updated
    UserService-->>APIGateway: Respond with Success
    APIGateway-->>User: Confirm Profile Update Success
    par Feed Update
        UserService->>FeedService: Notify Feed Service of Profile Update
    and Friend Profile Update
        UserService->>FriendProfile: Notify Friends of Updated Profile Info
    end

```

-   **Flow**: User updates their profile (e.g., username, bio, profile picture).
-   **Data Flow**:
    1.  **User submits profile changes** via frontend.
    2.  **Frontend sends data to the API Gateway**.
    3.  **API Gateway forwards the data to the User Service**.
    4.  **User Service updates the User Database**.
    5.  **Updated data is stored** (e.g., profile info in SQL DB, media in CDN).
    6.  **User Service responds to the frontend**, confirming the changes.
    7.  **Feeds and friend profiles may be updated** to reflect the new info (e.g., updated profile picture).

### 2. **Content Moderation**

```{mermaid}
sequenceDiagram
    participant User as User (Frontend)
    participant APIGateway as API Gateway
    participant ModService as Moderation Service
    participant DB as Moderation Database
    participant Content as Content Database (Posts/Comments)
    participant PostUser as Post Owner (User Who Posted Content)
    participant Reporter as Reporting User (User Who Flagged)

    User->>User: Flag Post or Comment
    User->>APIGateway: Send Flag Request
    APIGateway->>ModService: Forward Request to Moderation Service
    ModService->>Content: Fetch Flagged Post/Comment for Review
    ModService->>ModService: Evaluate Content (AI or Manual Review)
    alt Content Flagged as Inappropriate
        ModService->>DB: Flag Content in Moderation Database
        ModService->>Content: Hide or Remove Flagged Content
        ModService->>PostUser: Send Notification to Content Owner
        ModService->>Reporter: Send Notification to Reporting User
    else Content is Safe
        ModService->>Reporter: Send Notification to Reporting User (No Violation)
    end
```

-   **Flow**: A post or comment is flagged for inappropriate content and reviewed by the moderation service.
-   **Data Flow**:
    1.  **User flags a post** via the frontend.
    2.  **Frontend sends a flag request** to the API Gateway.
    3.  **API Gateway forwards the request** to the Moderation Service.
    4.  **Moderation Service evaluates the content** (can use AI or manual review).
    5.  **Moderation Service may flag the content** in the database.
    6.  **If flagged, content is hidden** from users or removed.
    7.  **Notification sent to the user** who posted the content and the reporting user about the moderation result.

### 3. **Search and Discovery**

```{mermaid}
sequenceDiagram
    participant User as User (Frontend)
    participant APIGateway as API Gateway
    participant SearchService as Search Service
    participant SearchDB as Search Database (e.g., Elasticsearch)
    participant ContentDB as Content Database (Posts/Users/Groups)

    User->>User: Enter Search Query (Content, Friends, Groups)
    User->>APIGateway: Send Search Request
    APIGateway->>SearchService: Forward Search Request to Search Service
    SearchService->>SearchDB: Query Search Database (Full-Text Search)
    SearchDB-->>SearchService: Return Search Results (Posts/Users/Groups)
    SearchService-->>APIGateway: Send Search Results to API Gateway
    APIGateway-->>User: Return Search Results to Frontend
    User->>User: Display Search Results (Content, Friends, Groups)

```

-   **Flow**: Users search for content, friends, or groups.
-   **Data Flow**:
    1.  **User enters search query** on the frontend.
    2.  **Frontend sends the search request** to the API Gateway.
    3.  **API Gateway routes the request** to the Search Service.
    4.  **Search Service queries the Search Database** (e.g., Elasticsearch, full-text search).
    5.  **Search results are retrieved** (posts, users, groups, etc.) from the database.
    6.  **Search results are sent back** to the frontend and displayed to the user.

### 4. **Friendship Management**

-   **Flow**: Users send friend requests, accept/decline requests, or unfriend each other.
-   **Data Flow**:
    1.  **User sends a friend request** via the frontend.
    2.  **Friendship request data** is sent to the API Gateway.
    3.  **API Gateway forwards the request** to the Friendship Service.
    4.  **Friendship Service updates the Friendship Database** (pending requests, acceptances, and rejections).
    5.  **If accepted, feeds are updated** (new posts from the friend are added to each other’s feed).
    6.  **Notifications are pushed** to both users (for request sent and accepted).
    7.  **Frontend updates user’s friend list** and displays the friend’s posts in their feed.

### 5. **Likes, Comments, and Reactions**

-   **Flow**: Users interact with posts by liking, commenting, or reacting.
-   **Data Flow**:
    1.  **User interacts with a post** (likes, comments, reacts).
    2.  **Interaction data is sent** to the API Gateway.
    3.  **Post Service receives the interaction**.
    4.  **Interaction is stored** in the Post Database (like count, comment text, etc.).
    5.  **Post Service updates the Feed Service**, notifying the original poster or friends.
    6.  **Notification Service pushes notifications** to the user who posted the content, informing them about the interaction.
    7.  **Frontend updates the UI** to reflect the new like, comment, or reaction.

### 6. **Media Upload and Streaming**

```{mermaid}
sequenceDiagram
    participant U as User
    participant F as Frontend
    participant AG as API Gateway
    participant MS as Media Service
    participant CDN
    participant DB as Post Database

    %% Upload Flow
    U->>F: Upload media (photo/video)
    F->>AG: Send media data
    AG->>MS: Forward media data
    MS->>CDN: Upload media
    CDN-->>MS: Return CDN URL
    MS->>DB: Store media metadata
    DB-->>MS: Confirm storage
    MS-->>AG: Return success
    AG-->>F: Return success
    F-->>U: Show upload confirmation

    %% Playback Flow
    U->>F: Request media playback
    F->>AG: Get media URL
    AG->>MS: Fetch media metadata
    MS->>DB: Query media data
    DB-->>MS: Return metadata
    MS-->>AG: Return CDN URL
    AG-->>F: Return media URL
    F->>CDN: Stream media
    CDN-->>U: Direct media stream
```

-   **Flow**: Users upload media (photos, videos) or view media (playback).
-   **Data Flow**:
    1.  **User uploads media** (e.g., photo or video).
    2.  **Frontend sends media data** to the API Gateway.
    3.  **API Gateway forwards the data** to the Media Service.
    4.  **Media Service uploads the media** to the CDN (Content Delivery Network) for efficient storage and retrieval.
    5.  **Media metadata (e.g., URL, file type, size)** is stored in the Post Database.
    6.  **Frontend retrieves the media URL** for display in posts or feeds.
    7.  **If media is requested for playback** (e.g., videos), it is streamed directly from the CDN to the user via the frontend.

### 7. **Analytics and Logging**

-   **Flow**: System logs user interactions for analytics (e.g., number of views, engagement metrics).
-   **Data Flow**:
    1.  **User interacts with the platform** (views posts, clicks links, etc.).
    2.  **Frontend logs interaction events** and sends them to the API Gateway.
    3.  **API Gateway forwards the data** to the Analytics Service.
    4.  **Analytics Service stores data** in the Analytics Database.
    5.  **Administrators or analytics dashboards** retrieve data for reporting and insights.

### 8. **User Privacy and Security**

-   **Flow**: User updates privacy settings (e.g., who can see their posts).
-   **Data Flow**:
    1.  **User updates privacy settings** via the frontend.
    2.  **Privacy settings data** is sent to the API Gateway.
    3.  **API Gateway forwards the settings** to the User Service.
    4.  **User Service updates the User Database** with the new privacy settings.
    5.  **Post Service and Feed Service** check these settings before displaying posts or feeds to other users (e.g., restrict posts to friends-only).
    6.  **Notification Service ensures notifications** respect privacy settings (e.g., notifications are sent only to allowed users).

### 9. **Group or Event Management**

-   **Flow**: Users create or manage groups/events (join, invite, leave).
-   **Data Flow**:
    1.  **User creates or joins a group/event** via the frontend.
    2.  **Frontend sends group/event request** to the API Gateway.
    3.  **Group/Event Service handles** the request and updates the database.
    4.  **Group members or event attendees are notified** through the Notification Service.
    5.  **Feed Service updates group/event posts** in the feed for members/attendees.
    6.  **Group/Event Service stores data** in the Group/Event Database.

### 10. **Push Notifications**

-   **Flow**: Push notifications are sent for real-time updates (likes, comments, messages, friend requests).
-   **Data Flow**:
    1.  **Notification triggered** (e.g., a new like or message).
    2.  **Notification Service identifies recipient** of the notification.
    3.  **Notification is pushed** to the frontend (mobile/web) using push notification services (e.g., Firebase Cloud Messaging, Apple Push Notification Service).
    4.  **Frontend receives the notification** and displays it in real time.

These data flows represent various interactions and processes within a typical social network architecture, where different services collaborate to provide a seamless experience for users.

## High level Database Entity Diagram

```{mermaid}
erDiagram
    Users ||--o{ Posts : creates
    Users ||--o{ Comments : writes
    Users ||--o{ Likes : gives
    Users ||--o{ Messages : sends
    Users ||--o{ Friendships : "participates in"
    Users ||--o{ Notifications : receives
    Users ||--o{ Media : uploads

    Users {
        uuid id PK
        string email
        string password_hash
        string full_name
        string profile_pic_url
        datetime created_at
        boolean is_verified
        json settings
        string oauth_provider
        string oauth_id
    }

    Posts {
        uuid id PK
        uuid user_id FK
        string content
        datetime created_at
        array media_urls
        json metadata
        int view_count
        boolean is_public
    }

    Comments {
        uuid id PK
        uuid post_id FK
        uuid user_id FK
        string content
        datetime created_at
        uuid parent_id FK
    }

    Likes {
        uuid id PK
        uuid user_id FK
        uuid post_id FK
        datetime created_at
        string reaction_type
    }

    Messages {
        uuid id PK
        uuid sender_id FK
        uuid receiver_id FK
        string content
        datetime sent_at
        boolean is_read
        array attachments
    }

    Friendships {
        uuid id PK
        uuid user_id1 FK
        uuid user_id2 FK
        string status
        datetime created_at
        datetime updated_at
    }

    Notifications {
        uuid id PK
        uuid user_id FK
        string type
        json payload
        datetime created_at
        boolean is_read
    }

    Media {
        uuid id PK
        uuid user_id FK
        string url
        string type
        int size
        string status
        json metadata
        datetime uploaded_at
    }

    Posts ||--o{ Comments : has
    Posts ||--o{ Likes : receives
    Posts ||--o{ Media : contains
```

Key aspects of the ERD:

1.  Uses UUID for distributed system scalability
2.  Implements soft deletion and timestamps for data tracking
3.  Stores JSON metadata for flexibility
4.  Includes OAuth integration fields
5.  Uses array types for media and attachments
6.  Maintains referential integrity with foreign keys

## Search Engine of Social Network

```{mermaid}
graph TB
    subgraph Client Layer
        A[Web/Mobile Client]
        B[Search UI Component]
    end

    subgraph API Layer
        C[API Gateway]
        D[Search Service]
        E[Rate Limiter]
    end

    subgraph Search Core
        F[Elasticsearch Cluster]
        G[Search Query Builder]
        H[Result Formatter]
        I[Search Analytics]
    end

    subgraph Data Layer
        J[MongoDB - Posts]
        K[PostgreSQL - Users]
        L[Redis Cache]
    end

    subgraph Indexing Pipeline
        M[Data Change Detector]
        N[Index Manager]
        O[Document Processor]
    end

    A -->|Search Request| B
    B -->|API Call| C
    C -->|Forward| D
    D -->|Rate Check| E
    E -->|Query| G
    G -->|Execute| F
    F -->|Raw Results| H
    H -->|Format| D
    D -->|Cache| L
    
    J -->|Changes| M
    K -->|Changes| M
    M -->|Notify| N
    N -->|Process| O
    O -->|Update| F
    
    D -->|Log| I
    I -->|Improve| G

    classDef service fill:#f9f,stroke:#333
    classDef database fill:#69b,stroke:#333
    classDef pipeline fill:#ffb,stroke:#333
    
    class D,G,H service
    class F,J,K,L database
    class M,N,O pipeline
```

The diagram shows the flow of data:

1.  Search request starts at the Client Layer
2.  Flows through the API Layer with rate limiting
3.  Gets processed in the Search Core
4.  Results are formatted and returned
5.  Meanwhile, the Indexing Pipeline ensures data stays fresh

The arrows in the diagram show:

-   Solid lines: Direct communication paths
-   Data flow from databases to search indices
-   Analytics feedback loop for optimization
-   Caching mechanisms for performance

The color coding indicates: - Services (pink fill) - Databases (blue fill) - Pipeline components (yellow fill) Lets understand the diagram by breaking it down into its main layers and components:

-   Client Layer

    -   Web/Mobile Client: Entry point for user interactions
    -   Search UI Component: Handles search input, autocomplete, and result display
    -   This layer manages user interactions and formats search requests before sending them to the API

-   API Layer

    -   API Gateway: Central entry point for all API requests, handles authentication and routing
    -   Search Service: Core service that orchestrates the search functionality
    -   Rate Limiter: Prevents abuse by limiting the number of requests per user/time period

-   Search Core

    -   Elasticsearch Cluster: Main search engine that indexes and searches data
        -   Handles distributed search across multiple nodes
        -   Maintains indices for users, posts, and other content
        -   Provides full-text search capabilities
    -   Search Query Builder: Constructs optimized search queries
        -   Translates user queries into Elasticsearch DSL
        -   Applies relevance scoring and boosting
        -   Handles complex query scenarios (fuzzy matching, filters)
    -   Result Formatter: Processes and formats search results
        -   Combines results from different indices
        -   Adds highlighting and snippets
        -   Formats response according to API specifications
    -   Search Analytics: Monitors and improves search performance
        -   Tracks popular searches
        -   Analyzes query patterns
- Provides optimization

-   Data Layer

    -   MongoDB - Posts: Stores post-related data
    -   PostgreSQL - Users: Stores user information
    -   Redis Cache: Caches frequent search results
        -   Improves response time for common searches
        -   Reduces load on Elasticsearch

-   Indexing Pipeline

    -   Data Change Detector: Monitors databases for changes
        -   Detects updates in MongoDB and PostgreSQL
        -   Triggers reindexing when needed
    -   Index Manager: Manages Elasticsearch indices
        -   Handles index creation and updates
        -   Manages mappings and settings
    -   Document Processor: Prepares data for indexing
        -   Transforms documents to match index structure
        -   Handles data enrichment

This architecture provides:

-   Scalability through distributed search
-   High availability with replicated indices
-   Real-time search capabilities
-   Performance optimization through caching
- Monitoring and analytics
-   Data consistency through the indexing pipeline

The design prioritizes both search relevance and system performance while maintaining data consistency across the platform.

## Scalability & Performance:

-   **Horizontal Scaling:** Add more instances of services as needed.
-   **Sharding:** Split data across multiple databases or storage units for scalability (e.g., user data sharding, partitioning large datasets).
-   **CDN (Content Delivery Network):** Use a CDN to cache static resources (e.g., images, videos, stylesheets) and reduce latency (e.g., AWS CloudFront, Cloudflare).
-   **Caching:** Use caching for high-traffic endpoints to reduce the load on the backend (e.g., user feeds, search results).
-   **Asynchronous Processing:** Use queues and workers for time-consuming tasks (e.g., processing media uploads, sending emails).

### 4. **High Availability & Fault Tolerance:**

-   **Replication:** Use database replication to ensure high availability and prevent data loss.
-   **Backup Systems:** Regular backups of critical data to avoid data loss in case of failures.
-   **Monitoring & Alerting:** Use tools like Prometheus, Grafana, or New Relic to monitor system health and set up alerts for anomalies.
-   **Failover Systems:** Use automatic failover and load balancing to ensure services remain available during failures.